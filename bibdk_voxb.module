<?php
module_load_include('inc', 'bibdk_voxb', 'lib/bibdk_voxb.worktabs');
module_load_include('inc', 'bibdk_voxb', 'lib/bibdk_voxb.parsers');
module_load_include('inc', 'bibdk_voxb', 'bibdk_voxb.theme');
module_load_include('inc', 'bibdk_voxb', 'bibdk_voxb.blog');
/** Implements hook_menu
 *
 */
function bibdk_voxb_menu() {
  $items = array();

  $path = drupal_get_path('module', 'bibdk_voxb');

  $items['voxb/ajax/review'] = array(
    'title' => t('Write review', array(), array('context' => 'voxb')),
    'type' => MENU_CALLBACK,
    'description' => '',
    //'access calback' => TRUE,
    'access arguments' => array('create blog content'),
    // 'access arguments' => array('search content'),
    'page callback' => 'bibdk_voxb_get_review_form',
    'file' => '/bibdk_voxb.blog.inc',
  );

  $items['voxb/ajax/get_rating'] = array(
    'title' => 'VoxB rating handler',
    'description' => '',
    'type' => MENU_CALLBACK,
    'access arguments' => array('search content'),
    'page callback' => 'bibdk_voxb_rating',
  );

  $items['voxb/ajax/set_rating/%/%'] = array(
    'title' => 'Voxb rating',
    'description' => '',
    'type' => MENU_CALLBACK,
    'access arguments' => array('search content'),
    'page callback' => 'bibdk_voxb_rate_me',
    'page arguments' => array(3, 4),
  );

  return $items;
}

/** Ajax call-back to get rating for PID given in $_POST
 *
 */
function bibdk_voxb_rating() {
  $pid = $_POST['pid'];

  //return node_add('blog');

  $pid = '870970-basis:27262589';

  $message = t('Rate me', array(), array('context' => 'voxb'));
  $response = bibdk_voxb_get_rating($pid);

  if (isset($response->error)) {
    $ret = array(
      'pid' => $pid,
      'error' => bibdk_voxb_set_error($response->error, 'error'),
    );
  }
  else {
    $ret = array(
      'pid' => $pid,
      'rating' => $response,
      'markup' => theme('voxb_rating', array(
        'object' => $response,
        'pid' => $pid,
        'title' => $message,
       // 'review_link' => drupal_render(bibdk_voxb_review_link($pid)),
      )),
    );
  }

  // return $ret['markup'];
  drupal_json_output($ret);
  exit;
}

function bibdk_voxb_review_link($pid) {
  $link = array(
    '#theme' => 'link',
    '#text' => t('voxb_write_review', array(), array('context' => 'voxb')),
    '#path' => 'voxb/ajax/review',
    '#weight' => 0,
    '#options' => array(
      'query' => array('pid' => $pid),
      'attributes' => array(
        'class' => array(
          'bibdk_review_link',
        ),
        'id' => drupal_html_id('bibdk_voxb_review_' . $pid),
      ),
      'html' => FALSE,
    ),
  );

  return $link;
}

function bibdk_voxb_set_error($message, $type) {
  // remove messages
  drupal_get_messages();
  // set an appropiate message
  drupal_set_message($message, $type);

  return theme('status_messages');
}

function bibdk_voxb_get_rating($pid) {
  $response = open_voxb_fetchDataRequest($pid);
  // ting client return FALSE on error
  if ($response === FALSE) {
    // this is probably a configuration error
    $ret->error = t('An error occurred. Please contact administrator if problem persists', array(), array('context' => 'voxb'));
    watchdog('voxb', 'Ting client returned FALSE - check configuration', array(), WATCHDOG_ERROR);

    return $ret;
  }

  try {
    $ret = bibdk_voxb_parse_fetchdata_request($response);
  }
  catch (bibdkVoxbException $e) {
    watchdog('voxb', $e->getMessage(), array(), WATCHDOG_ERROR);
    $ret->error = $e->getMessage();
  }

  return $ret;
}

function bibdk_voxb_rate_me($id, $rating) {
  // we have five stars, and rating is from 1-100
  // multiply by 20
  $rating = $rating * 20;

  // check the user and get voxb_id
  $voxb_id = bibdk_voxb_user_check();
  if ($voxb_id === FALSE) {
    $ret = array('error' => bibdk_voxb_set_error(t('Please log in to rate', array(), array('context' => 'voxb')), 'status'));
    drupal_json_output($ret);
    exit;
  }

  // init a userobject to handle user data
  $voxbUser = new bibdkVoxbUser($voxb_id);
  // data holds all activity from user (review, ratings, tags etc.)
  $data = $voxbUser->userData();

  $data_array = array();
  if(!empty($data)){
  // check if user has already rated this material
  $data_array = bibdk_voxb_in_multi_array($id, $data);
  }

  if (empty($data_array)) {
    // this is a new rating
    $response = open_voxb_createMyDataRequest($id, $rating, $voxb_id);
    // @TODO parse response
  }
  else {
    // this is an update of a rating
    // get the voxbIdentifier for update request. It is in the data_array
    $identifier = $data_array['voxb:voxbIdentifier']['#text'];
    // no need for error check here if it fails it fails
    $response = open_voxb_updateRating($identifier, $rating);
    //@TODO parse response to see if all went well
  }

}

/** Check user
 * 1. is ding user logged in (provider_user)
 * 2. Has user an voxb_id
 *      a. if not - create user
 * @return bool|string; FALSE if something is wrong, else voxb_id
 */
function bibdk_voxb_user_check() {
  global $user;

  // check if user is provider user
  if (!(ding_user_is_provider_user($user))) {
    return FALSE;
  }

  // @TODO .. CACHE .. in $_SESSION ??

  //get the voxb_id via openuserinfo webservice
  $xml = ding_provider_invoke('user', 'get_voxb', $user->mail);

  try {
    $voxb_id = _bibdk_voxb_parse_get_voxb_response($xml);
  }
  catch (bibdkVoxbException $e) {
    watchdog('voxb', $e->getMessage(), array(), WATCHDOG_ERROR);

    return FALSE;
  }

  // check voxb_id
  if ($voxb_id === '0') {
    //invlalid (not bound) id .. create user on voxb to get a valid is
    // @TODO errrocheck
    $voxb_id = bibdk_voxb_create_voxb_user();
  }

  return $voxb_id;
}

/** Create voxb user from global drupal user
 * @return bool|string; voxb_id, given from voxb-webservice on creation or FALSE on failure
 */
function bibdk_voxb_create_voxb_user() {
  global $user;
  // user is not yet bound for voxb
  // create the user on voxb
  $xml = open_voxb_createUserRequest($user->mail);
  try {
    $voxb_id = bibdk_voxb_parse_create_user_response($xml);
  }
  catch (bibdkVoxbException $e) {
    watchdog('voxb', $e->getMessage(), array(), WATCHDOG_ERROR);

    return FALSE;
  }

  // voxb_id has been retrieved. Bind on OUI
  $xml = ding_provider_invoke('user', 'bind_voxb', $user->mail, $voxb_id);
  try {
    $valid = bibdk_voxb_parse_bind_voxb_response($xml);
  }
  catch (bibdkVoxbException $e) {
    watchdog('voxb', $e->getMessage(), array(), WATCHDOG_ERROR);

    return FALSE;
  }

  return $voxb_id;
}


