<?php
module_load_include('inc', 'bibdk_voxb', 'lib/bibdk_voxb.worktabs');
module_load_include('inc', 'bibdk_voxb', 'lib/bibdk_voxb.parsers');
module_load_include('inc', 'bibdk_voxb', 'bibdk_voxb.theme');
module_load_include('inc',' bibdk_voxb', 'lib/bibdk_voxb.node');
module_load_include('inc', 'bibdk_voxb', 'lib/bibdk_voxb.review');

/** Implements hook_menu
 *
 */
function bibdk_voxb_menu() {
  $items = array();

  $items['voxb/ajax/review'] = array(
    'title' => t('Write review', array(), array('context' => 'voxb')),
    'type' => MENU_CALLBACK,
    'description' => '',
    'access callback' => 'bibdk_voxb_user_review_access',
    //'access arguments' => array('access arguments'),
    'access arguments' => array('create blog content'),
    // 'access arguments' => array('search content'),
    'page callback' => 'bibdk_voxb_get_review_form',
    'file' => 'lib/bibdk_voxb.review.inc',
  );

  $items['voxb/ajax/get_rating'] = array(
    'title' => 'VoxB rating handler',
    'description' => '',
    'type' => MENU_CALLBACK,
    'access arguments' => array('search content'),
    'page callback' => 'bibdk_voxb_rating',
  );

  $items['voxb/ajax/set_rating/%/%'] = array(
    'title' => 'Voxb rating',
    'description' => '',
    'type' => MENU_CALLBACK,
    'access arguments' => array('search content'),
    'page callback' => 'bibdk_voxb_rate_me',
    'page arguments' => array(3, 4),
  );

  return $items;
}

function bibdk_voxb_user_review_access($perm){
  global $user;
  $ret = ding_user_is_provider_user($user);
  return $ret;
}

/** Ajax call-back to get rating for PID given in $_POST
 *
 */
function bibdk_voxb_rating() {
 $pid = $_POST['pid'];
 //$pid = '870970-basis:25807995';
  $message = t('Rate me', array(), array('context' => 'voxb'));

  $lid = bibdk_voxb_pid2faust($pid);
  $response = open_voxb_fetchDataRequest($lid);

  // ting client return FALSE on error
  if ($response === FALSE) {
    // this is probably a configuration error
    $ret->error = t('An error occurred. Please contact administrator if problem persists', array(), array('context' => 'voxb'));
    watchdog('voxb', 'Ting client returned FALSE - check configuration', array(), WATCHDOG_ERROR);
    drupal_json_output($ret);
    drupal_exit();

  }
// get ratings
  $rating = bibdk_voxb_get_rating($response);

  if (isset($rating->error)) {
    $ret = array(
      'pid' => $pid,
      'error' => bibdk_voxb_set_error($response->error, 'error'),
    );
  }
  else {
    $ret = array(
      'pid' => $pid,
      'rating' => $rating,
      'markup' => theme('voxb_rating', array(
        'object' => $rating,
        'pid' => $pid,
        'title' => $message,
        'review_link' => drupal_render(bibdk_voxb_review_link($pid)),
        'teasers'=>theme('voxb_teaser',array(
          'reviews'=>$rating->reviews,
          'date_text'=>bibdk_voxb_review_teaser_text_date(),
          'author_text'=>bibdk_voxb_review_teaser_text_author(),
        )),
      )),
    );
  }


  drupal_json_output($ret);
  drupal_exit();
}

function bibdk_voxb_review_teaser_text_date(){
  return t('Reviewed_date',array(),array('context'=>'voxb'));
}

function bibdk_voxb_review_teaser_text_author(){
  return t('Reviewed_by',array(),array('context'=>'voxb'));
}



/** Get a link to review given pid
 *
 * @param $pid; the pid to link to
 */
function  bibdk_voxb_review_link($pid) {
  global $user;
  if(!ding_user_is_provider_user($user)){
    return array();
  }

  $link = array(
    '#theme' => 'link',
    '#text' => t('voxb_write_review', array(), array('context' => 'voxb')),
    '#path' => 'voxb/ajax/review',
    '#weight' => 0,
    '#options' => array(
      'query' => array('pid' => $pid),
      'attributes' => array(
        'class' => array(
          'bibdk_review_link',
        ),
        'id' => drupal_html_id('bibdk_voxb_review_' . $pid),
      ),
      'html' => FALSE,
    ),
  );

  return $link;
}

/** Wrapper for drupal_st message - return a themed message
 * @param $message
 * @param $type
 * @return string
 */
function bibdk_voxb_set_error($message, $type) {
  // unset all messages - this is an ajax thing, and we don't
  // want a clear message for the user
  drupal_get_messages();
  drupal_set_message($message, $type);
  return theme('status_messages');
}

/** VERY simple pid-parser.
 * @param $pid
 * @param string $type
 * @return string
 */
function bibdk_voxb_pid2faust($pid, $type = 'faust'){
  // get pos of lok
  $pos = strpos($pid,'-');
  $lok =  substr($pid, 0, $pos);
  $pos = strpos($pid,':');
  $lid =  substr($pid, $pos+1, strlen($pid));

  switch($type){
    case 'faust':
      return $lid;
    default:
      return $lok.':'.$lid;
  }
}


/**
 * fetch VOXB rating for given pid
 * @param $pid
 * @return stdObject $ret; if  an error occurred $ret->error is set; else $ret->rating, $ret->ratingCount
 */
function bibdk_voxb_get_rating($response) {
  $status = bibdk_voxb_check_response($response);
  if($status){
    try {
      $ret = bibdk_voxb_parse_fetchdata_request($response);
    }
    catch (bibdkVoxbException $e) {
      watchdog('voxb', $e->getMessage(), array(), WATCHDOG_ERROR);
      $ret->error = $e->getMessage();
    }
  }
  else{
    $ret->error = theme('status_messages');
  }

  return $ret;
}


/** Ajax call to add or update a VOXB rating
 * @param $id; the id to rate
 * @param $rating; the rating to apply
 */
function bibdk_voxb_rate_me($pid, $rating) {
  $pid = bibdk_voxb_pid2faust($pid);
  // we have five stars, and rating is from 1-100
  // multiply by 20
  $rating = $rating * 20;

  // check the user and get voxb_id
  $voxb_id = bibdk_voxb_user_check();
  if ($voxb_id === FALSE) {
    $ret = array('error' => bibdk_voxb_set_error(t('Please log in to rate', array(), array('context' => 'voxb')), 'status'));
    drupal_json_output($ret);
    exit;
  }

  $user_data= bibdk_voxb_get_user_item($pid, $voxb_id);

  if (empty($user_data)) {
    // this is a new rating
    $response = open_voxb_createMyDataRequest($pid, $rating, $voxb_id);
    // check response method logs errors if necessary
    bibdk_voxb_check_response($response);
  }
  else {
    // this is an update of a rating
    // get the voxbIdentifier for update request. It is in the user_data array
    $identifier = $user_data['voxb:voxbIdentifier']['#text'];
    $response = open_voxb_updateRating($identifier, $rating);
    // check_response method logs errors if necessary
    bibdk_voxb_check_response($response);
  }
}

function bibdk_voxb_get_user_item($pid, $voxb_id){
  // init a userobject to handle user data
  $voxbUser = new bibdkVoxbUser($voxb_id);
  // data holds all activity from user (review, ratings, tags etc.)
  $data = $voxbUser->userData();

  $user_data = array();
  if(!empty($data)){
    // check if user has already rated this material
    $user_data = bibdk_voxb_in_multi_array($pid, $data);
  }
  return $user_data;
}

function bibdk_voxb_check_response( $response ){
  $dom = new DOMDocument();
  if( @$dom->loadXML($response) === FALSE ){
    // invalid xml .. log
    watchdog('voxb', 'Invalid xml in response : %xml',array('%xml'=>$response),WATCHDOG_ERROR);
    return FALSE;
  }
  $xpath = new DOMXPath($dom);
  $xpath->registerNamespace('voxb','"http://oss.dbc.dk/ns/voxb');
  // check voxb:error
  $query = '//voxb:error';
  $nodes = $xpath->query($query);
  if ( $nodes->length > 0 ){

    // error returned from service .. there are many - set one for user.
    // and watchdog the real error
    $error = $nodes->item(0)->nodeValue;
    if($error == 'Could not find item' ){
      // this is actually no error .. simply no items
      return TRUE;
    }
    watchdog('voxb', 'Service returned error : %error',array('%error'=>$error),WATCHDOG_ERROR);
    $message = t('service_error',array(),array('context'=>'voxb'));
    drupal_set_message($message, 'error');
    return FALSE;
  }
  // check for faultcode element
  $query = '//faultstring';
  $nodes = $xpath->query($query);
  if ( $nodes->length > 0 ){
    //this is probably a programming error . xml validation for request failed
    $error = $nodes->item(0)->nodeValue;
    $message = t('service_error : %error',array('%error' => $error),array('context'=>'voxb'));
    drupal_set_message($message, 'error');
    return FALSE;
  }
  // check is good
  return TRUE;
}

/** Check user
 * 1. is ding user logged in (provider_user)
 * 2. Has user an voxb_id
 *      a. if not - create user
 * @return bool|string; FALSE if something is wrong, else voxb_id
 */
  function bibdk_voxb_user_check($type='rating') {
  global $user;
  // check if user is provider user
  if (!(ding_user_is_provider_user($user))) {
    return FALSE;
  }
  //get the voxb_id via openuserinfo webservice
  $xml = ding_provider_invoke('user', 'get_voxb', $user->mail);

  try {
    $voxb_id = _bibdk_voxb_parse_get_voxb_response($xml);
  }
  catch (bibdkVoxbException $e) {
    watchdog('voxb', $e->getMessage(), array(), WATCHDOG_ERROR);
    return FALSE;
  }

  // @TODO check on $type paramater. if not rating get the accept page
  // check voxb_id
  if ($voxb_id === '0') {
    //invlalid (not bound) id .. create user on voxb to get a valid id
    // @TODO errrocheck
    $voxb_id = bibdk_voxb_create_voxb_user();
  }

  return $voxb_id;
}

function bibdk_voxb_get_user_by_fingerprint(){
  global $user;
  $userid = bibdk_voxb_encrypt($user->mail);
  $xml = open_voxb_fetchUserByFingerPrint($userid);
  try {
    $voxb_id = bibdk_voxb_parse_create_user_response($xml);
  }
  catch (bibdkVoxbException $e) {
    watchdog('voxb', $e->getMessage(), array(), WATCHDOG_ERROR);
    return FALSE;
  }

  return $voxb_id;
}

/** Create voxb user from global drupal user
 * @return bool|string; voxb_id, given from voxb-webservice on creation or FALSE on failure
 */
function bibdk_voxb_create_voxb_user() {
  global $user;
  // user is not yet bound for voxb
  // create the user on voxb
  $userid = bibdk_voxb_encrypt($user->mail);
  $xml = open_voxb_createUserRequest($userid);

  // check_response method logs errors if necessary
  bibdk_voxb_check_response($xml);
  try {
    $voxb_id = bibdk_voxb_parse_create_user_response($xml);
  }
  catch (bibdkVoxbException $e) {
    watchdog('voxb', $e->getMessage(), array(), WATCHDOG_ERROR);
    return FALSE;
  }

  // service didn't return expected result.
  // maybe user already exists on voxb. Try to get him by fingerprint
  if($voxb_id === FALSE){
    $voxb_id = bibdk_voxb_get_user_by_fingerprint();
  }

  if($voxb_id === FALSE){
    // give up
    return FALSE;
  }

  // voxb_id has been retrieved. Bind on OUI
  $xml = ding_provider_invoke('user', 'bind_voxb', $user->mail, $voxb_id);
  try {
    $valid = bibdk_voxb_parse_bind_voxb_response($xml);
  }
  catch (bibdkVoxbException $e) {
    watchdog('voxb', $e->getMessage(), array(), WATCHDOG_ERROR);
    return FALSE;
  }

  return $voxb_id;
}

/**
 * @param string $mail; mailaddress of user
 * @return string md5 encrypted $mail
 */
function bibdk_voxb_encrypt($mail){
  return md5($mail);
}


