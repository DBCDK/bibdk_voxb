<?php

class bibdkVoxbUnitTestCase extends DrupalUnitTestCase
{

    public static function getInfo() {
        return array(
            'name' => t('bibliotek.dk voxb  : Unit tests'),
            'description' => t('Check if parsing voxb returns valid result'),
            'group' => t('bibliotek.dk'),
        );
    }

    public function setUp() {
        module_load_include('module', 'bibdk_voxb');
        parent::setUp();
    }

    public function testFetchDataParsing() {
        $path = drupal_get_path('module', 'bibdk_voxb');
        require_once($path.'/lib/bibdk_voxb.parsers.inc');

        $path = drupal_get_path('module', 'open_voxb_mockup');
        $xml = file_get_contents($path . '/fetchDataResponse.xml');


        $xml = trim($xml);

        $resp = bibdk_voxb_parse_fetchdata_request($xml);
        $this->assertTrue(isset($resp->rating), 'rating is set on response object');
        $this->assertTrue(isset($resp->ratingCount), 'ratingCount is set on response object');

        $xml = 'hest';
        try {
            $resp = bibdk_voxb_parse_fetchdata_request($xml);
        } catch (bibdkVoxbException $e) {
            $this->assertTrue(TRUE, 'bibdkVoxbException thrown with invalid xml');
        }
    }

    public function testInMultiArray(){
        $path = drupal_get_path('module', 'bibdk_voxb');
        require_once($path.'/lib/bibdk_voxb.parsers.inc');

        $haystack = array(array('hest'=>'hund'),'ko'=>array('fisk'=>'ged'),array('zebra'=>array('krokodille'=>array('fugl'))));

        // test that value in a nested array is found by method
        $needle = 'fugl';
        $result = bibdk_voxb_in_multi_array( $needle, $haystack);
        $this->assertTrue(is_array($result),'found nested needle in haystack');

        $needle = 'hund';
        $result = bibdk_voxb_in_multi_array( $needle, $haystack);
        $this->assertTrue(is_array($result),'found needle in first level haystack');

        $needle = 'so';
        $result = bibdk_voxb_in_multi_array( $needle, $haystack);
        $this->assertTrue(($result === FALSE),'return FALSE when needle not found');
    }

    public function testHund() {
        $this->assertTrue(TRUE, 'true is true');
    }
}